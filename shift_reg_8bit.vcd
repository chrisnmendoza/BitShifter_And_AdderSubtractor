$date
  Sun Apr 25 17:42:12 2021
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module shift_reg_8bit_tb $end
$var reg 8 ! i[7:0] $end
$var reg 8 " o[7:0] $end
$var reg 1 # i_shift_in $end
$var reg 1 $ clk $end
$var reg 1 % enable $end
$var reg 2 & sel[1:0] $end
$scope module shift_reg_8bit_0 $end
$var reg 8 ' i_8bit[7:0] $end
$var reg 1 ( i_shift_in_8bit $end
$var reg 2 ) sel[1:0] $end
$var reg 1 * clock $end
$var reg 1 + enable $end
$var reg 8 , o_8bit[7:0] $end
$var reg 8 - values[7:0] $end
$var reg 1 . inshift0 $end
$var reg 1 / inshift1 $end
$scope module shift_reg_0 $end
$var reg 4 0 i[3:0] $end
$var reg 1 1 i_shift_in $end
$var reg 2 2 sel[1:0] $end
$var reg 1 3 clock $end
$var reg 1 4 enable $end
$var reg 4 5 o[3:0] $end
$var reg 4 6 values[3:0] $end
$upscope $end
$scope module shift_reg_1 $end
$var reg 4 7 i[3:0] $end
$var reg 1 8 i_shift_in $end
$var reg 2 9 sel[1:0] $end
$var reg 1 : clock $end
$var reg 1 ; enable $end
$var reg 4 < o[3:0] $end
$var reg 4 = values[3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b11000000 !
b11000000 "
0#
1$
1%
b11 &
b11000000 '
0(
b11 )
1*
1+
b11000000 ,
b11000000 -
U.
U/
b1100 0
U1
b11 2
13
14
b1100 5
b1100 6
b0000 7
U8
b11 9
1:
1;
b0000 <
b0000 =
#1000000
b11000001 !
b11000001 "
b11000001 '
b11000001 ,
b11000001 -
b0001 7
b0001 <
b0001 =
#2000000
b0U110U00 "
b10 &
b10 )
b0U110U00 ,
0.
0/
01
b10 2
b0U11 5
b0U11 6
08
b10 9
b0U00 <
b0U00 =
#3000000
b00 &
b00 )
b00 2
b00 9
#4000000
